runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
segments_mon <- segments %>% group_by(segment) %>%
summarise(monetary_median = median(monetary_score))
df %>%
e_charts() %>%
e_scatter(Quantity) %>%
e_visual_map(UnitPrice, scale = e_scale) %>%  # scale color
e_legend(FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(plotly)
library(hrbrthemes)
library(viridis)
library(ggridges)
library(highcharter)
library(rio)
library(purrr)
library(stringr)
library(scales)
library(stringr)
library(DT)
library(data.table)
library(knitr)
df <- read_csv("data.csv")
glimpse(df)
df <- df %>% mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
df <- df %>% drop_na()
df<- df %>%
mutate_at(.vars = c("InvoiceNo", "CustomerID","StockCode", "Country"),
.funs = as.character)
df$InvoiceDate <- date(parse_date_time(df$InvoiceDate,"mdy_HM"))
df <- df %>% mutate(TotalPrice = Quantity*UnitPrice)
glimpse(df)
df_clean <- df %>%group_by(CustomerID) %>%
summarise(res = as.numeric(as.Date("2012-01-01")-max(InvoiceDate)),
freq =n_distinct(InvoiceNo), monitery = sum(TotalPrice)/n_distinct(InvoiceNo)
)
summary(df_clean)
kable(head(df_clean))
#recency - How Recently Did the Customer Purchase
hist(df_clean$res)
# Frequency – How often do they purchase?
hist(df_clean$freq, breaks = 50)
# Monetary Value – How much do they spend?
hist(df_clean$monitery, breaks = 50)
df_clean$monitery <- log(df_clean$monitery)
hist(df_clean$monitery)
df_clean2 <- df_clean
row.names(df_clean2) <- df_clean2$CustomerID
df_clean2
df_clean2$CustomerID <- NULL
df_clean2 <- scale(df_clean2)
summary(df_clean2)
d <- dist(df_clean2)
c <- hclust(d, method = 'ward.D2')
members <- cutree(c, k =8)
members[1:5]
table(members)
df_clean3 <- as_data_frame(aggregate(df_clean[,2:4], by=list(members), mean))
# library(echarts4r)
# df %>% e_chart(x= InvoiceDate) %>%
#   e_line(serie = Quantity) %>%
#   e_tooltip(trigger = "axis")
df_x <- df %>% mutate_at(.vars = c("StockCode"),
.funs = as.numeric)
df_x <- df_x %>% drop_na()
df_x <- df_x %>% group_by(Description) %>%
summarise(max = max(UnitPrice))
df_x <-df_x[order(df_x$max,decreasing = T),]
df_x <- head(df_x,10)
df_x
df_x <- df %>% mutate_at(.vars = c("StockCode"),
.funs = as.numeric)
df_x <- df_x %>% drop_na()
df_x <- df_x %>% group_by(Description) %>%
summarise(max = max(UnitPrice))
df_x <-df_x[order(df_x$max,decreasing = T),]
df_x <- head(df_x,10)
df_x <-df_x[order(df_x$max,decreasing = F),]
df_x
cols <- "#587195"
hchart(df_x,
type = "column",
hcaes(x =Description,
y =  max,
color = cols))
# highchart() %>%
#   hc_chart(type = "column") %>%
#   hc_plotOptions(column = list(stacking = "normal")) %>%
#   hc_xAxis(categories = df_t$CustomerID) %>%
#   hc_add_series(name="Non Current Assets",
#                 data = df_t$recency,
#                 stack = "res") %>%
#   hc_add_series(name="dsa",
#                 data = df_t$freq,
#                 stack = "res")
df_x %>%
e_chart(Description) %>%
e_bar(max, label =list(show= T , position = "right", formatter = "{b}")) %>%
e_color(cols) %>%
e_tooltip(formatter = htmlwidgets::JS("
function(params){
return(params.name +
'<br />Unit Price: ' + params.value[0])
}
")) %>%
e_flip_coords() %>%
e_y_axis(axisLabel = list(show = F),
axisTick = list(show = FALSE),
axisLine = list(show = FALSE)) %>%
e_legend(show = FALSE) %>%
e_title(text = "Most Expensive Units", left = "center") %>%
#  e_axis_labels(
#   x = "Price",
#   y = "Items",
# ) %>%
e_x_axis(name = "Price",
nameLocation = "middle",
nameTextStyle = list(
color = "black",
fontSize = 20
)) %>%
e_y_axis(name = "Items",
nameLocation = "middle",
nameTextStyle = list(
color = "black",
fontSize = 20
))
segments_mon <- segments %>% group_by(segment) %>%
summarise(monetary_median = median(monetary_score))
df %>%
e_charts() %>%
e_scatter(Quantity) %>%
e_visual_map(UnitPrice, scale = e_scale) %>%  # scale color
e_legend(FALSE)
library(echarts4r)
segments_mon <- segments %>% group_by(segment) %>%
summarise(monetary_median = median(monetary_score))
df %>%
e_charts() %>%
e_scatter(Quantity) %>%
e_visual_map(UnitPrice, scale = e_scale) %>%  # scale color
e_legend(FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(plotly)
library(hrbrthemes)
library(viridis)
library(ggridges)
library(highcharter)
library(rio)
library(purrr)
library(stringr)
library(scales)
library(stringr)
library(DT)
library(data.table)
library(knitr)
library(echarts4r)
df <- read_csv("data.csv")
glimpse(df)
df <- df %>% mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
df <- df %>% drop_na()
df<- df %>%
mutate_at(.vars = c("InvoiceNo", "CustomerID","StockCode", "Country"),
.funs = as.character)
df$InvoiceDate <- date(parse_date_time(df$InvoiceDate,"mdy_HM"))
df <- df %>% mutate(TotalPrice = Quantity*UnitPrice)
glimpse(df)
df_clean <- df %>%group_by(CustomerID) %>%
summarise(res = as.numeric(as.Date("2012-01-01")-max(InvoiceDate)),
freq =n_distinct(InvoiceNo), monitery = sum(TotalPrice)/n_distinct(InvoiceNo)
)
summary(df_clean)
kable(head(df_clean))
#recency - How Recently Did the Customer Purchase
hist(df_clean$res)
# Frequency – How often do they purchase?
hist(df_clean$freq, breaks = 50)
# Monetary Value – How much do they spend?
hist(df_clean$monitery, breaks = 50)
df_clean$monitery <- log(df_clean$monitery)
hist(df_clean$monitery)
df_clean2 <- df_clean
row.names(df_clean2) <- df_clean2$CustomerID
df_clean2
df_clean2$CustomerID <- NULL
df_clean2 <- scale(df_clean2)
summary(df_clean2)
d <- dist(df_clean2)
c <- hclust(d, method = 'ward.D2')
members <- cutree(c, k =8)
members[1:5]
table(members)
df_clean3 <- as_data_frame(aggregate(df_clean[,2:4], by=list(members), mean))
# library(echarts4r)
# df %>% e_chart(x= InvoiceDate) %>%
#   e_line(serie = Quantity) %>%
#   e_tooltip(trigger = "axis")
df_x <- df %>% mutate_at(.vars = c("StockCode"),
.funs = as.numeric)
df_x <- df_x %>% drop_na()
df_x <- df_x %>% group_by(Description) %>%
summarise(max = max(UnitPrice))
df_x <-df_x[order(df_x$max,decreasing = T),]
df_x <- head(df_x,10)
df_x
df_x <- df %>% mutate_at(.vars = c("StockCode"),
.funs = as.numeric)
df_x <- df_x %>% drop_na()
df_x <- df_x %>% group_by(Description) %>%
summarise(max = max(UnitPrice))
df_x <-df_x[order(df_x$max,decreasing = T),]
df_x <- head(df_x,10)
df_x <-df_x[order(df_x$max,decreasing = F),]
df_x
cols <- "#587195"
hchart(df_x,
type = "column",
hcaes(x =Description,
y =  max,
color = cols))
# highchart() %>%
#   hc_chart(type = "column") %>%
#   hc_plotOptions(column = list(stacking = "normal")) %>%
#   hc_xAxis(categories = df_t$CustomerID) %>%
#   hc_add_series(name="Non Current Assets",
#                 data = df_t$recency,
#                 stack = "res") %>%
#   hc_add_series(name="dsa",
#                 data = df_t$freq,
#                 stack = "res")
df_x %>%
e_chart(Description) %>%
e_bar(max, label =list(show= T , position = "right", formatter = "{b}")) %>%
e_color(cols) %>%
e_tooltip(formatter = htmlwidgets::JS("
function(params){
return(params.name +
'<br />Unit Price: ' + params.value[0])
}
")) %>%
e_flip_coords() %>%
e_y_axis(axisLabel = list(show = F),
axisTick = list(show = FALSE),
axisLine = list(show = FALSE)) %>%
e_legend(show = FALSE) %>%
e_title(text = "Most Expensive Units", left = "center") %>%
#  e_axis_labels(
#   x = "Price",
#   y = "Items",
# ) %>%
e_x_axis(name = "Price",
nameLocation = "middle",
nameTextStyle = list(
color = "black",
fontSize = 20
)) %>%
e_y_axis(name = "Items",
nameLocation = "middle",
nameTextStyle = list(
color = "black",
fontSize = 20
))
df_clean |>
e_charts() |>
e_histogram(res) |>
e_density(res, name = "density", areaStyle = list(opacity = .4),
smooth = TRUE, y_index = 1) |>
e_tooltip()
df_clean %>%
e_charts() %>%
e_histogram(freq) %>%
e_density(freq, name = "density", areaStyle = list(opacity = .4),
smooth = TRUE, y_index = 1) %>%
e_tooltip()
df_clean$monitery <- log(df_clean$monitery)
df_clean |>
e_charts(monitery) |>
e_histogram(monitery) |>
e_density(monitery, name = "density", areaStyle = list(opacity = .4),
smooth = TRUE, y_index = 1) |>
e_tooltip()
summary(df_clean)
min(df$InvoiceDate)
library(rfm)
rfm_result <- rfm_table_order(
data = df,
customer_id = CustomerID,
revenue = TotalPrice,
order_date = InvoiceDate,
analysis_date = as.Date("2010-12-01")
)
rfm_result
segment_names <- c("Champions", "Loyal Customers", "Potential Loyalist",
"New Customers", "Promising", "Need Attention", "About To Sleep",
"At Risk", "Can't Lose Them", "Lost")
# We set the upper and lower bounds for recency, frequency, and monetary for the above segments
recency_lower <- c(4, 2, 3, 4, 3, 2, 2, 1, 1, 1)
recency_upper <- c(5, 5, 5, 5, 4, 3, 3, 2, 1, 2)
frequency_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
frequency_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
monetary_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
monetary_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
# We use the segments and the bounds we previously established to group our users into different segments
segments <- rfm_segment(rfm_result,
segment_names,
recency_lower,
recency_upper,
frequency_lower,
frequency_upper,
monetary_lower,
monetary_upper)
head(segments)
segments_res <- segments %>% group_by(segment) %>%
summarise(recency_median = median(recency_score))
segments_res %>%
e_charts(segment) %>%
e_pie(recency_median, radius = c('40%', '70%'), name = "Median Value",
itemStyle = list(borderRadius= 10, borderColor = "#fff", borderWidth = 2),
emphasis = list(show = T, fontSize = "40", label = list(show = T))) %>%
e_title("Customer Segment")  %>%
e_labels(show = FALSE,
position = "center",
fontSize = 18,
fontWeigth = "bold",
formatter = "{b} \n median value : {d}%") %>%
e_tooltip(trigger = "item", formatter = "{b}")
segments_res
# segments_mon <- segments %>% group_by(segment) %>%
#       summarise(monetary_median = median(monetary_score))
#
# df %>%
#   e_charts() %>%
#   e_scatter(Quantity) %>%
#   e_visual_map(Quantity, scale = e_scale) %>%  # scale color
#   e_legend(FALSE)
str(mtcars)
test <- df %>% group_by(Country) %>%
summarise(value = sum(Quantity))
test %>%
e_charts(Country) %>%
e_map(value) %>%
e_visual_map(value)
knitr::opts_chunk$set(echo = TRUE)
Skip to content
url <- "https://echarts.apache.org/examples/data-gl/asset/data/population.json"
data <- jsonlite::fromJSON(url)
data <- as.data.frame(data)
names(data) <- c("lon", "lat", "value")
data$value <- log(data$value)
data |>
e_charts(lon) |>
e_mapbox(
token = "pk.eyJ1IjoiamNvZW5lcCIsImEiOiJjamwyYXJyMjExb2R0M3FxcDlmemg2czFiIn0.OL6qEEADz5qBjhKecwgBdg",
style = "mapbox://styles/mapbox/dark-v9"
) |>
e_bar_3d(lat, value, coord_system = "mapbox") |>
e_visual_map(value)
data |>
e_charts(lon) |>
e_mapbox(
token = "pk.eyJ1IjoiamNvZW5lcCIsImEiOiJjamwyYXJyMjExb2R0M3FxcDlmemg2czFiIn0.OL6qEEADz5qBjhKecwgBdg",
style = "mapbox://styles/mapbox/dark-v9"
) |>
e_bar_3d(lat, value, coord_system = "mapbox") |>
e_visual_map(value)
data
shiny::runApp()
test <- df %>% group_by(Country) %>%
summarise(value = sum(Quantity))
test %>%
e_charts(Country) %>%
e_map(value) %>%
e_visual_map(value) %>%
e_brush()
test <- df %>% group_by(Country) %>%
summarise(value = sum(Quantity))
test %>%
e_charts(Country) %>%
e_map(value) %>%
e_visual_map(value) %>%
e_brush() %>%
e_tooltip()
test <- df %>% group_by(Country) %>%
summarise(Total Quantity : = sum(Quantity))
test <- df %>% group_by(Country) %>%
summarise(Total Quantity  = sum(Quantity))
test <- df %>% group_by(Country) %>%
summarise(TotalQuantity  = sum(Quantity))
test %>%
e_charts(Country) %>%
e_map(value) %>%
e_visual_map(value) %>%
e_brush() %>%
e_tooltip()
test
test <- df %>% group_by(Country) %>%
summarise(Total Quantity  = sum(Quantity))
test <- df %>% group_by(Country) %>%
summarise(TotalQuantity  = sum(Quantity))
test %>%
e_charts(Country) %>%
e_map(TotalQuantity) %>%
e_visual_map(TotalQuantity) %>%
e_brush() %>%
e_tooltip()
test
test <- df %>% group_by(Country) %>%
summarise(TotalQuantity  = sum(Quantity))
test %>%
e_charts(Country) %>%
e_map(TotalQuantity) %>%
e_visual_map(TotalQuantity) %>%
e_brush() %>%
e_tooltip()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# ------
df <- read_csv("data.csv")
# ------ Cleansing
df <- df %>% mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
df <- df %>% drop_na()
df<- df %>%
mutate_at(.vars = c("InvoiceNo", "CustomerID","StockCode","Country"),
.funs = as.character)
# mutate_at(.vars = c("Country"),
#           .funs = as.factor)
df$InvoiceDate <- parse_date_time(df$InvoiceDate,"mdy_HM")
df <- df %>% mutate(TotalPrice = Quantity*UnitPrice)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
